#!/usr/bin/env python
"""
multiply-dl is a tool for downloading all your
old albums on Multiply.

It will be useless starting December 2012.
"""

import getpass
import requests
import os

username = ""
password = ""
albums = []


def get_album_count():
    """
    This will help us compute how many times we have to make an API call.
    """
    url = "http://%s.multiply.com/api/read.json?type=photos&password=%s" % (
        username, password)
    r = requests.post(url).json
    return r['total_items'] - 1


def generate_context(album):
    """
    This creates an HTML file containing all the comments in the
    original Multiply page.
    """

    html_header = """
    <html>
    <head><title>%s</title></head>
    """ % album['subject']

    html_body = """
    <body>
    <h1>%s</h1>
    <p>Description: %s</p>
    <p>Created date: %s</p>
    """ % (album['subject'], album['body'], album['created_date'])

    replies =[]

    # Generate the album comments.
    if album['num_replies'] > 0:
        replies = [reply['value'] for reply in album['replies']]
    for reply in replies:
        if 'deleted' in reply:
            html_body += "<li>%s</li>" % reply['body']
        else:
            html_body += "<li>%s: %s</li>" % (reply['owner_id'], reply['body'])


    i = 0

    # Generate an ugly album.
    for photo_item in album['photos']:
        i += 1
        filename = "%03d.jpg" % i
        photo = photo_item['value']
        caption = photo['caption']

        html_body += """
        <p>
        <a href="%s">
        <img src="%s" height="300">
        </a>
        <br>Caption: %s</br>
        """ % (filename, filename, caption)

        # Generate the photo comments.
        # It's a Multiply bug...
        # In some cases(I don't know what), it correctly
        # gives the number of replies, but not the list
        # of replies.
        if photo['num_replies'] > 0 and 'replies' in photo:
            replies = [reply['value'] for reply in photo['replies']]
        else:
            replies = []

        for reply in replies:
            if 'deleted' in reply:
                html_body += "<li>%s</li>" % reply['body']
            else:
                html_body += "<li>%s: %s</li>" % (reply['owner_id'], reply['body'])

        html_body += "</p>"

    html_footer = """
    </html>
    """

    index_html = html_header + html_body + html_footer

    filename = "%s/index.html" % album['subject'].replace("/", "")

    with open(filename, "w") as photo_file:
        photo_file.write(index_html)


def get_album(album_index):
    """
    Accepts the album's index in our global list named albums.
    """
    album_key = albums[album_index]['value']['item_key']
    url = "http://%s.multiply.com/api/read.json?item_key=%s&password=%s" % (
        username, album_key, password)
    album = requests.post(url).json
    print "Album :\n%s" % album['subject']
    print "Description :\n%s" % album['body']
    print "Created date : %s" % album['created_date']
    print "Number of photos: %s" % album['num_photos']
    print "Number of replies: %s" % album['num_replies']
    print "Tags : "
    for tag in album['tags']:
        print "  - %s" % tag['tag']

    i = 0
    print "Photo URLs: "
    # Can't have slashes in a directory name...
    album_name = album['subject'].replace("/", "")
    if not os.path.exists(album_name):
        os.mkdir(album_name)

    generate_context(album)

    for photo_item in album['photos']:
        i += 1
        filename = "%s/%03d.jpg" % (album_name, i)

        # Check if the file already exists.
        # This might be useful in case we want to retry
        # a failed download.
        if os.path.exists(filename):
            print "%s already exists. Skipping." % filename
            continue

        photo = photo_item['value']
        print "Downloading: %s - %03d/%03d" % (
            album_name, i, album['num_photos'])
        photo_dl = requests.get(photo['src'])

        with open(filename, "wb") as photo_file:
            photo_file.write(photo_dl.content)


def get_album_list(start):
    """
    Gets the list of photo albums.
    """
    url = "http://%s.multiply.com/api/read.json?type=photos&password=%s&start=%s" % (username, password, start)
    r = requests.post(url).json
    items = r['items']
    return items


def main():
    """
    Asks for the username and password and displays the user's
    list of albums.
    """
    global username
    global password
    global albums
    username = raw_input("Username: ")
    password = getpass.getpass("Password: ")

    album_count = get_album_count()
    print "You have %d albums." % album_count

    while (len(albums) != album_count):
        albums += get_album_list(len(albums))

    # Because normal people aren't used to 0-relative counts.
    i = 1
    for album_item in albums:
        album = album_item['value']
        print "%03d - %s (%d photos)" % (
            i, album['subject'], album['num_photos'])
        i = i + 1

    print "Enter the album #s you want to download. Separate with spaces."
    print "You can also input \"all\" to download all albums."
    albums_input = raw_input("Albums: ")

    if albums_input == "all":
        target_albums = [str(x) for x in range(album_count)]
    else:
        target_albums = albums_input.split()

    download_count = len(target_albums)

    i = 0
    print "You are about to download %d album/s." % download_count
    cont = raw_input("Continue? (y/n) ")
    if cont != 'y':
        exit(1)

    for target_album in target_albums:
        get_album(int(target_album) - 1)
        i += 1
        print "%03d/%03d albums downloaded." % (i, download_count)

if __name__ == "__main__":
    try:
        main()
    except requests.exceptions.ConnectionError as conn_err:
        print "There is a problem with your connection or Multiply."
        print "ERROR: %s" % conn_err
        print "Please try again. The download will continue where it ended."
    except KeyboardInterrupt as k_int:
        print "Exiting..."
